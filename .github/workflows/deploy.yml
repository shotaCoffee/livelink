name: Deploy to Vercel

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel (Preview)
        if: github.ref != 'refs/heads/main'
        id: deploy-preview
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "ðŸš€ Preview deployed to: $DEPLOYMENT_URL"

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        id: deploy-production
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "ðŸŽ‰ Production deployed to: $DEPLOYMENT_URL"

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request' && steps.deploy-preview.outputs.deployment-url
        uses: actions/github-script@v8
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy-preview.outputs.deployment-url }}';
            const comment = `## ðŸš€ Preview Deployment

            Your changes have been deployed to Vercel:
            **ðŸ“± Preview URL:** ${deploymentUrl}

            - **ðŸ“Š Environment:** Preview
            - **ðŸ”— Branch:** \`${context.payload.pull_request.head.ref}\`
            - **âœ… Status:** Ready

            This preview will be automatically updated on new commits.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const deploymentUrl = '${{ steps.deploy-preview.outputs.deployment-url || steps.deploy-production.outputs.deployment-url }}';

            if (deploymentUrl) {
              github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: context.payload.deployment?.id || 0,
                state: state,
                environment_url: deploymentUrl,
                description: state === 'success' ? 'Deployment successful' : 'Deployment failed'
              });
            }